#!/usr/bin/env bash
set -e; [[ $DOKKU_TRACE ]] && set -x

RETHINKDB_IMAGE=crosbymichael/rethinkdb

PENDING_DIR="$DOKKU_ROOT/.rethinkdb/pending-volumes"

# Check if name is specified
if [[ $1 == rethinkdb:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi

    VOLUME_DIR=""
    if [[ -d "$DOKKU_ROOT/$APP/rethinkdb" ]]; then
        VOLUME_DIR="$DOKKU_ROOT/$APP/rethinkdb"
        BIND_FILE="$VOLUME_DIR/PUBLISH"
    elif [[ -d "$PENDING_DIR/$APP" ]]; then
        VOLUME_DIR="$PENDING_DIR/$APP"
    fi

    CONTAINER_NAME="rethinkdb_$APP"
    ENV_FILE="$DOKKU_ROOT/$APP/ENV"
fi

config_restart_app() {
  local APP="$1";

  echo "-----> Releasing $APP ..."
  dokku release $APP
  echo "-----> Release complete!"
  echo "-----> Deploying $APP ..."
  dokku deploy $APP
  echo "-----> Deploy complete!"
}

docker_inspect_port() {
    local NAME PORT DUMP
    NAME="$1"
    PORT="$2"
    DUMP="{{(index (index .NetworkSettings.Ports \"$PORT/tcp\") 0).HostPort}}"
    docker inspect -format=$DUMP $NAME 2> /dev/null || true
}

bind_port() {
    local CONTAINER_PORT="$1"
    local HOST_PORT="$2"
    if [[ -z HOST_PORT ]]; then
        PORT_BINDING="$CONTAINER_PORT"
    else
        PORT_BINDING="$HOST_PORT:$CONTAINER_PORT"
    fi

    if [[ -f $BIND_FILE ]]; then
        sed -i "/$CONTAINER_PORT\$/ d" $BIND_FILE
    fi

    echo PORT_BINDING >>"$BIND_FILE"

    # Save randomly-generated dynamic bindings as static
    # NOTE: We only start in this case because we use the port assignments
    # from starting the container to set the ports. Either way, rethinkdb:start
    # gets called in the redeployment that normally follows a call to this
    # function.
    # This is hacky (we're starting extra containers for almost no reason),
    # but it's how I'm doing it right now.
    if [[ -z HOST_PORT ]]; then
        dokku rethinkdb:start $APP
        HOST_PORT=$(dokku_inspect_port $CONTAINER_NAME $CONTAINER_PORT)
        sed -i "s/^$CONTAINER_PORT\$/$CONTAINER_PORT:$HOST_PORT/" $BIND_FILE
    fi
}

case "$1" in
  rethinkdb:create)

    # Check if an existing DB volume exists
    if [[ -d $VOLUME_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        echo "-----> Creating new RethinkDB volume for $APP"
        if $APP_EXISTS; then
            mkdir -p "$VOLUME_DIR"
            chown -R dokku:dokku "$VOLUME_DIR"
        else
            mkdir -p "$PENDING_DIR/$APP"
            chown -R dokku:dokku "$PENDING_DIR"
            # Container will be linked in pre-release hook
        fi
    fi

    if $APP_EXISTS; then
        # Container will be launched in pre-deploy hook
        dokku rethinkdb:link $APP
        config_restart_app $APP
    fi
    ;;

  rethinkdb:delete)
    # Stop the container
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker kill $ID > /dev/null
        docker rm $ID > /dev/null
    fi

    # Remove persistent volume
    if [[ -d "$VOLUME_DIR" ]]; then
        rm -rf "$VOLUME_DIR"
    fi
    if [[ -d "$PENDING_DIR/$APP" ]]; then
        rm -rf "$PENDING_DIR/$APP"
    fi

    if [[ -f $ENV_FILE ]]; then
        sed -i '/^export (?:RETHINKDB|RDB)_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR$/ d' $ENV_FILE
        sed -i '/^export (?:RETHINKDB|RDB)_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT$/ d' $ENV_FILE
    fi
    echo "-----> RethinkDB container deleted: $CONTAINER_NAME"
    if $APP_EXISTS; then
        config_restart_app $APP
    fi
    ;;

  rethinkdb:link)
    if $APP_EXISTS; then
        # Add aliases for RETHINKDB variables
        if [ -f $ENV_FILE ]; then
            sed -i "/^export (?:RETHINKDB|RDB)_(?:HOST|PORT)=/ d" $ENV_FILE
        fi
        cat >>$ENV_FILE <<"EOF"
export RETHINKDB_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR
export RETHINKDB_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT
export RDB_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR
export RDB_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT
EOF
    else
        echo "Cannot link non-existing app"
        exit 1
    fi
    ;;

  rethinkdb:bind-webui)
    bind_port $APP 8080 "$3"
    dokku deploy $APP
    ;;

  rethinkdb:bind-cluster)
    bind_port $APP 29015 "$3"
    dokku deploy $APP
    ;;

  rethinkdb:unbind)
    if [ -f $ENV_FILE ]; then
        rm $BIND_FILE
    fi
    dokku rethinkdb:start $APP
    ;;

  rethinkdb:stop)
    ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    ;;

  rethinkdb:start)
    if [[ -z $VOLUME_DIR ]]; then
        echo "No RethinkDB volume found for $APP"
        exit 1
    else
        dokku rethinkdb:stop $APP
        ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
        if [[ ! -z "$ID" ]]; then
            docker rm $ID > /dev/null
        fi

        PORTS=()
        if [[ -z "$BIND_FILE" && -f "$BIND_FILE" ]]; then
            while read line
            do
              PORTS+=("-p")
              PORTS+=("$line")
            done < $BIND_FILE
        fi

        VOLUME="$VOLUME_DIR:/rethinkdb"

        docker run -v $VOLUME -name=$CONTAINER_NAME ${PORTS[@]} \
            -d $RETHINKDB_IMAGE --bind all

        dokku rethinkdb:info $APP
    fi
    ;;

  rethinkdb:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
    if [[ -z "$ID" ]]; then
        echo "No container found for $APP"
        exit 1
    else
        IP=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' $ID)
        echo "       Container ID: ${ID}"
        echo "       Container IP: ${IP}"
    fi
    ;;

  rethinkdb:logs)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    rethinkdb:create <app>                          Create a RethinkDB container
    rethinkdb:delete <app>                          Delete specified RethinkDB container
    rethinkdb:link <app>                            Set variables to link to RethinkDB container
    rethinkdb:start <app>                           Start app's RethinkDB container
    rethinkdb:stop <app>                            Stop app's RethinkDB container
    rethinkdb:info <app>                            Display RethinkDB container address and ports
    rethinkdb:logs <app>                            Display last logs from RethinkDB container
EOF
    ;;

esac
